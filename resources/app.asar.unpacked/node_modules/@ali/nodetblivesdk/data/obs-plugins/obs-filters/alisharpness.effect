uniform float4x4 ViewProj;
uniform texture2d image;

uniform texture2d detail;

uniform float texture_width;
uniform float texture_height;

sampler_state def_sampler {
	Filter   = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertInOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct VertOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertOut VSDefault(VertInOut vert_in)
{
	VertOut vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = vert_in.uv;
	return vert_out;
}

float4 PSDrawBare_0(VertOut vert_in) : TARGET
{
    
	float4 a5 = image.Sample(def_sampler, vert_in.uv);

	float4 a4 = image.Sample(def_sampler, vert_in.uv + float2(-texture_width,0));
	float4 a6 = image.Sample(def_sampler, vert_in.uv + float2(texture_width,0));
	float4 a2 = image.Sample(def_sampler, vert_in.uv + float2(0,-texture_height));
	float4 a8 = image.Sample(def_sampler, vert_in.uv + float2(0,texture_height));

	float4 a1 = image.Sample(def_sampler, vert_in.uv - float2(texture_width,texture_height));
	float4 a9 = image.Sample(def_sampler, vert_in.uv + float2(texture_width,texture_height));
	float4 a7 = image.Sample(def_sampler, vert_in.uv - float2(texture_width,-texture_height));
	float4 a3 = image.Sample(def_sampler, vert_in.uv + float2(texture_width,-texture_height));

	float4 a14 = image.Sample(def_sampler, vert_in.uv + 2 *  float2(-texture_width,0));
	float4 a16 = image.Sample(def_sampler, vert_in.uv + 2 *  float2(texture_width,0));
	float4 a12 = image.Sample(def_sampler, vert_in.uv + 2 *  float2(0,-texture_height));
	float4 a18 = image.Sample(def_sampler, vert_in.uv + 2 *  float2(0,texture_height));

	float4 a11 = image.Sample(def_sampler, vert_in.uv - 2 *  float2(texture_width,texture_height));
	float4 a19 = image.Sample(def_sampler, vert_in.uv + 2 *  float2(texture_width,texture_height));
	float4 a17 = image.Sample(def_sampler, vert_in.uv - 2 *  float2(texture_width,-texture_height));
	float4 a13 = image.Sample(def_sampler, vert_in.uv + 2 *  float2(texture_width,-texture_height));

         float4 total = float4(0.0);
         float4 sum = float4(0.0);
         float4 coeff = float4(0.0);
         float sigma_r = 0.1;
         coeff = exp(-((a5-a5)*(a5-a5))/(2.0*sigma_r*sigma_r));
         sum += a5 * coeff; total += coeff;
         coeff = exp(-((a4-a5)*(a4-a5))/(2.0*sigma_r*sigma_r));
         sum += a4 * coeff; total += coeff;
         coeff = exp(-((a6-a5)*(a6-a5))/(2.0*sigma_r*sigma_r));
         sum += a6 * coeff; total += coeff;
         coeff = exp(-((a2-a5)*(a2-a5))/(2.0*sigma_r*sigma_r));
         sum += a2 * coeff; total += coeff;
         coeff = exp(-((a8-a5)*(a8-a5))/(2.0*sigma_r*sigma_r));
         sum += a8 * coeff; total += coeff;
         coeff = exp(-((a1-a5)*(a1-a5))/(2.0*sigma_r*sigma_r));
         sum += a1 * coeff; total += coeff;
         coeff = exp(-((a9-a5)*(a9-a5))/(2.0*sigma_r*sigma_r));
         sum += a9 * coeff; total += coeff;
         coeff = exp(-((a7-a5)*(a7-a5))/(2.0*sigma_r*sigma_r));
         sum += a7 * coeff; total += coeff;
         coeff = exp(-((a3-a5)*(a3-a5))/(2.0*sigma_r*sigma_r));
         sum += a3 * coeff; total += coeff;
         coeff = exp(-((a14-a5)*(a14-a5))/(2.0*sigma_r*sigma_r));
         sum += a14 * coeff; total += coeff;
         coeff = exp(-((a16-a5)*(a16-a5))/(2.0*sigma_r*sigma_r));
         sum += a16 * coeff; total += coeff;
         coeff = exp(-((a12-a5)*(a12-a5))/(2.0*sigma_r*sigma_r));
         sum += a12 * coeff; total += coeff;
         coeff = exp(-((a18-a5)*(a18-a5))/(2.0*sigma_r*sigma_r));
         sum += a18 * coeff; total += coeff;
         coeff = exp(-((a11-a5)*(a11-a5))/(2.0*sigma_r*sigma_r));
         sum += a11 * coeff; total += coeff;
         coeff = exp(-((a19-a5)*(a19-a5))/(2.0*sigma_r*sigma_r));
         sum += a19 * coeff; total += coeff;
         coeff = exp(-((a17-a5)*(a17-a5))/(2.0*sigma_r*sigma_r));
         sum += a17 * coeff; total += coeff;
         coeff = exp(-((a13-a5)*(a13-a5))/(2.0*sigma_r*sigma_r));
         sum += a13 * coeff; total += coeff;
         sum = sum / total;

    return float4(sum.xyz,1.0);

}

float4 PSDrawBare_1(VertOut vert_in) : TARGET
{
	float4 a5 = image.Sample(def_sampler, vert_in.uv);
	float4 sum = a5;

	sum += image.Sample(def_sampler, vert_in.uv + float2(-texture_width,0));
	sum += image.Sample(def_sampler, vert_in.uv + float2(texture_width,0));
	sum += image.Sample(def_sampler, vert_in.uv + float2(0,-texture_height));
	sum += image.Sample(def_sampler, vert_in.uv + float2(0,texture_height));

	sum += image.Sample(def_sampler, vert_in.uv - float2(texture_width,texture_height));
	sum += image.Sample(def_sampler, vert_in.uv + float2(texture_width,texture_height));
	sum += image.Sample(def_sampler, vert_in.uv - float2(texture_width,-texture_height));
	sum += image.Sample(def_sampler, vert_in.uv + float2(texture_width,-texture_height));

	sum += image.Sample(def_sampler, vert_in.uv + 2.0*float2(-texture_width,0));
	sum += image.Sample(def_sampler, vert_in.uv + 2.0*float2(texture_width,0));
	sum += image.Sample(def_sampler, vert_in.uv + 2.0*float2(0,-texture_height));
	sum += image.Sample(def_sampler, vert_in.uv + 2.0*float2(0,texture_height));

	sum += image.Sample(def_sampler, vert_in.uv - 2.0*float2(texture_width,texture_height));
	sum += image.Sample(def_sampler, vert_in.uv + 2.0*float2(texture_width,texture_height));
	sum += image.Sample(def_sampler, vert_in.uv - 2.0*float2(texture_width,-texture_height));
	sum += image.Sample(def_sampler, vert_in.uv + 2.0*float2(texture_width,-texture_height));

	sum += image.Sample(def_sampler, vert_in.uv - float2(texture_width * 2,texture_height));
	sum += image.Sample(def_sampler, vert_in.uv + float2(texture_width * 2,texture_height));
	sum += image.Sample(def_sampler, vert_in.uv - float2(texture_width * 2,-texture_height));
	sum += image.Sample(def_sampler, vert_in.uv + float2(texture_width * 2,-texture_height));

	sum += image.Sample(def_sampler, vert_in.uv - float2(texture_width,texture_height * 2));
	sum += image.Sample(def_sampler, vert_in.uv + float2(texture_width,texture_height * 2));
	sum += image.Sample(def_sampler, vert_in.uv - float2(texture_width,-texture_height * 2));
	sum += image.Sample(def_sampler, vert_in.uv + float2(texture_width,-texture_height * 2));

    sum = 0.5 + (a5 - sum/25.0) * 0.8;
    sum = clamp(sum, 0.5-20.0/256.0, 0.5+20.0/256.0);
    return float4(sum.xyz,1.0);

}

float4 ADD(VertOut vert_in) : TARGET
{
    
	float4 d =  image.Sample(def_sampler, vert_in.uv) + detail.Sample(def_sampler, vert_in.uv) - 0.5 ;
    return float4(d.xyz,1.0);

}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = ADD(vert_in);
	}
}

technique Draw_0
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawBare_0(vert_in);
	}
}

technique Draw_1
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawBare_1(vert_in);
	}
}

