// Parameters:
/// OBS Default
uniform float4x4 ViewProj;
/// Texture
uniform texture2d image;
uniform float2 pImageTexel;
/// Blur
uniform float pSize;
uniform float2 pStepScale;
/// Gaussian
uniform float4 pKernel[32];

#define MAX_BLUR_SIZE 128

// Sampler
sampler_state linearSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
	MinLOD    = 0;
	MaxLOD    = 0;
};

// Default Vertex Shader and Data
struct VertDataIn {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct VertDataOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertDataOut VSDefault(VertDataIn vtx) {
	VertDataOut vert_out;
	vert_out.pos = mul(float4(vtx.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = vtx.uv;
	return vert_out;
}

// Functions
float GetKernelAt(int i) {
	return (float4(pKernel[int(floor(float(i) / 4.0))]))[i%4];
}

// Blur 1 Dimensional
float4 PSBlur1D(VertDataOut vtx) : TARGET {
	float4 final = image.Sample(linearSampler, vtx.uv)
		* GetKernelAt(0);

	// Loop unrolling is only possible with a fixed known maximum.
	// Some compilers may unroll up to x iterations, but most will not.
	for (int n = 1; n <= MAX_BLUR_SIZE; n++) {
		float2 nstep = (pImageTexel * pStepScale) * n;
		float kernel = GetKernelAt(n);
		final += image.Sample(linearSampler, vtx.uv + nstep) * kernel;
		final += image.Sample(linearSampler, vtx.uv - nstep) * kernel;

		if (n >= pSize) {
			break;
		}
	}

	return final;
}

technique Draw {
	pass {
		vertex_shader = VSDefault(vtx);
		pixel_shader  = PSBlur1D(vtx);
	}
}
