uniform float4x4 ViewProj;
uniform texture2d image;
uniform texture2d mean;
uniform texture2d diff;
uniform texture2d lut;
uniform float blurAlpha;
uniform float sharpAlpha;
uniform float uniAlpha;
uniform float texelWidthOffset;
uniform float texelHeightOffset;

sampler_state def_sampler {
	Filter   = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertInOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct VertOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertOut VSDefault(VertInOut vert_in)
{
	VertOut vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = vert_in.uv;
	return vert_out;
}

float4 Nothing(VertOut vert_in) : TARGET
{
	float4 E  = image.Sample(def_sampler, vert_in.uv);
	return E;
}


float4 MeanBlur(VertOut vert_in) : TARGET
{
	float4 E  = image.Sample(def_sampler, vert_in.uv);
	E  += image.Sample(def_sampler, vert_in.uv.xy +  1 * float2(texelWidthOffset, texelHeightOffset));
	E  += image.Sample(def_sampler, vert_in.uv.xy -  1 * float2(texelWidthOffset, texelHeightOffset));
	E  += image.Sample(def_sampler, vert_in.uv.xy +  2 * float2(texelWidthOffset, texelHeightOffset));
	E  += image.Sample(def_sampler, vert_in.uv.xy -  2 * float2(texelWidthOffset, texelHeightOffset));
	E  += image.Sample(def_sampler, vert_in.uv.xy +  3 * float2(texelWidthOffset, texelHeightOffset));
	E  += image.Sample(def_sampler, vert_in.uv.xy -  3 * float2(texelWidthOffset, texelHeightOffset));
	E  += image.Sample(def_sampler, vert_in.uv.xy +  4 * float2(texelWidthOffset, texelHeightOffset));
	E  += image.Sample(def_sampler, vert_in.uv.xy -  4 * float2(texelWidthOffset, texelHeightOffset));
	
	return E * 0.1111;
}


float4 beautyMean(VertOut vert_in) : TARGET
{
	float4 iColor  = image.Sample(def_sampler, vert_in.uv);
	float4 meanColor  = mean.Sample(def_sampler, vert_in.uv);

	float4 diffColor = (iColor - meanColor) * 7.07;
	diffColor = min(diffColor * diffColor,1.0);

	return float4(diffColor.rgb,1.0);
}


float4 beautyBlend(VertOut vert_in) : TARGET
{
	float4 iColor  = image.Sample(def_sampler, vert_in.uv);
	float4 meanColor  = mean.Sample(def_sampler, vert_in.uv);
	float4 varColor = diff.Sample(def_sampler, vert_in.uv);

    float p = clamp((min(iColor.r, meanColor.r - 0.1) - 0.2) * 4.0, 0.0, 1.0);
    float meanVar = (varColor.r + varColor.g + varColor.b) / 3.0;
    float kMin  = (0.11 / (meanVar + 0.1) - meanVar * 0.4) * p * blurAlpha;

	float4 sum = float4(0.0,0.0,0.0,0.0);
	float4 Guass = float4(1.0, 1.0, 1.0,1.0);

	sum += image.Sample(def_sampler, vert_in.uv );
	sum += image.Sample(def_sampler, vert_in.uv - float2(texelWidthOffset, 0));
	sum += image.Sample(def_sampler, vert_in.uv + float2(texelWidthOffset, 0));
	sum += image.Sample(def_sampler, vert_in.uv - float2(0, texelHeightOffset));
	sum += image.Sample(def_sampler, vert_in.uv + float2(0, texelHeightOffset));
	sum += image.Sample(def_sampler, vert_in.uv - float2(texelWidthOffset, texelHeightOffset));
	sum += image.Sample(def_sampler, vert_in.uv + float2(texelWidthOffset, texelHeightOffset));
	sum += image.Sample(def_sampler, vert_in.uv - float2(-texelWidthOffset, texelHeightOffset));
	sum += image.Sample(def_sampler, vert_in.uv + float2(-texelWidthOffset, texelHeightOffset));
	sum += image.Sample(def_sampler, vert_in.uv - 2 * float2(texelWidthOffset, 0));
	sum += image.Sample(def_sampler, vert_in.uv + 2 *  float2(texelWidthOffset, 0));
	sum += image.Sample(def_sampler, vert_in.uv - 2 *  float2(0, texelHeightOffset));
	sum += image.Sample(def_sampler, vert_in.uv + 2 *  float2(0, texelHeightOffset));
	sum += image.Sample(def_sampler, vert_in.uv - 2 *  float2(texelWidthOffset, texelHeightOffset));
	sum += image.Sample(def_sampler, vert_in.uv + 2 *  float2(texelWidthOffset, texelHeightOffset));
	sum += image.Sample(def_sampler, vert_in.uv - 2 *  float2(-texelWidthOffset, texelHeightOffset));
	sum += image.Sample(def_sampler, vert_in.uv + 2 *  float2(-texelWidthOffset, texelHeightOffset));

	sum = iColor - sum / 17.0;
    sum = clamp(sum, -20.0/256.0, 20.0/256.0);

    float coeff = 1.2 * (meanVar-0.1) / (meanVar+0.1);
    meanColor = meanColor + 0.5 * sum * (sharpAlpha+0.3);
    iColor = iColor + coeff * sum * (sharpAlpha+0.3);

    float3 resultColor = lerp(iColor.rgb, meanColor.rgb, kMin);

    return float4(resultColor,1.0);
}

float4 beautyColorTable(VertOut vert_in) : TARGET
{
	float4 textureColor  = image.Sample(def_sampler, vert_in.uv);
	float blueColor = textureColor.b * 63.0;
	float2 quad1;
    quad1.y = floor(floor(blueColor) / 8.0);
    quad1.x = floor(blueColor) - (quad1.y * 8.0);

	float2 quad2;
    quad2.y = floor(ceil(blueColor) /8.0);
    quad2.x = ceil(blueColor) - (quad2.y * 8.0);

	float2 texPos1;
    texPos1.x = (quad1.x * 1.0/8.0) + 0.5/512.0 + ((1.0/8.0 - 1.0/512.0) * textureColor.r);
    texPos1.y = (quad1.y * 1.0/8.0) + 0.5/512.0 + ((1.0/8.0 - 1.0/512.0) * textureColor.g);
	texPos1.y = 1.0 - texPos1.y;

    float2 texPos2;
    texPos2.x = (quad2.x * 1.0/8.0) + 0.5/512.0 + ((1.0/8.0 - 1.0/512.0) * textureColor.r);
    texPos2.y = (quad2.y * 1.0/8.0) + 0.5/512.0 + ((1.0/8.0 - 1.0/512.0) * textureColor.g);
	texPos2.y = 1.0 - texPos2.y;


	float4 newColor1 = lut.Sample(def_sampler, texPos1);
	float4 newColor2 = lut.Sample(def_sampler, texPos2);

	float4 newColor = lerp(newColor1, newColor2, frac(blueColor));

	return float4(lerp(textureColor.rgb, newColor.rgb, uniAlpha), textureColor.a);
	float4 lut_Color = lut.Sample(def_sampler, vert_in.uv);
	return lut_Color;
}

technique MeanBlur_Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = MeanBlur(vert_in);
	}
}

technique beautyMean_Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = beautyMean(vert_in);
	}
}

technique beautyBlend_Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = beautyBlend(vert_in);
	}
}

technique beautyColorTable_Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = beautyColorTable(vert_in);
	}
}

technique Nothing_Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = Nothing(vert_in);
	}
}
