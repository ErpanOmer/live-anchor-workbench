uniform float4x4 ViewProj;
uniform texture2d image;
uniform texture2d target;
uniform texture2d mean;
uniform texture2d diff;
uniform float blurAlpha;

sampler_state def_sampler {
	Filter   = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertInOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct VertOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertOut VSDefault(VertInOut vert_in)
{
	VertOut vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = vert_in.uv;
	return vert_out;
}

float4 PSDrawBare(VertOut vert_in) : TARGET
{
	float4 iColor  = image.Sample(def_sampler, vert_in.uv);
	float4 meanColor  = mean.Sample(def_sampler, vert_in.uv);
	float4 varColor = diff.Sample(def_sampler, vert_in.uv);
        float p = clamp((min(iColor.r, meanColor.r - 0.1) - 0.2) * 4.0, 0.0, 1.0);
        float meanVar = (varColor.r + varColor.g + varColor.b) / 3.0;
        float kMin  = (0.11 / (meanVar + 0.1) - meanVar * 0.4) * p * blurAlpha;
        float3 resultColor = lerp(iColor.rgb, meanColor.rgb, kMin);
        return float4(resultColor,1.0);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawBare(vert_in);
	}
}
