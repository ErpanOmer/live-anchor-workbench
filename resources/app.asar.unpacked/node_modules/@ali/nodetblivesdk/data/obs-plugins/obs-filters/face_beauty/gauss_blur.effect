uniform float4x4 ViewProj;
uniform texture2d image;

uniform texture2d target;

uniform float2 offset; 
uniform float2 blurSize;

sampler_state def_sampler {
	Filter   = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertInOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct VertOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertOut VSDefault(VertInOut vert_in)
{
	VertOut vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = vert_in.uv;
	return vert_out;
}

float4 PSDrawBare(VertOut vert_in) : TARGET
{
	float2 myOffset = offset * blurSize;
	float4 sum = float4(0.0,0.0,0.0,0.0);
	float4 Guass = float4(0.05448868, 0.24420134, 0.40261995,1.0);
	sum += image.Sample(def_sampler, vert_in.uv + (-2.0 * myOffset)) * Guass.x;
	sum += image.Sample(def_sampler, vert_in.uv + (-1.0 * myOffset)) * Guass.y;
	sum += image.Sample(def_sampler, vert_in.uv + ( 0.0 * myOffset)) * Guass.z;
	sum += image.Sample(def_sampler, vert_in.uv + ( 1.0 * myOffset)) * Guass.y;
	sum += image.Sample(def_sampler, vert_in.uv + ( 2.0 * myOffset)) * Guass.x;
   
	return float4(sum.xyz,1.0);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawBare(vert_in);
	}
}
