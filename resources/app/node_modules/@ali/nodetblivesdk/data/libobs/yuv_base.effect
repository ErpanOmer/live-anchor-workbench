uniform texture2d u_texY;
uniform texture2d u_texU;
uniform texture2d u_texV;
uniform float4x4  ViewProj;

sampler_state def_sampler {
	Filter   = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};
struct VSInput
{
    float4 pos : POSITION;
    float2 tex : TEXCOORD0;
};
struct PSInput
{
    float4 pos : SV_POSITION;
    float2 tex : TEXCOORD0;
};
PSInput VSDefault(VSInput input)
{
    PSInput output;
    /*input.position.w = 1.0f;
    output.position = mul(input.position, ViewProj);*/
	output.pos = mul(float4(input.pos.xyz, 1.0), ViewProj);
    output.tex = input.tex;
    return output;
}
float4 PSDraw(PSInput input) : TARGET
{
    float y = u_texY.Sample(def_sampler, input.tex).r;
    float u = u_texU.Sample(def_sampler, input.tex).r  - 0.5f;
    float v = u_texV.Sample(def_sampler, input.tex).r  - 0.5f;
    float r = y + 1.14f * v;
    float g = y - 0.394f * u - 0.581f * v;
    float b = y + 2.03f * u;
    return float4(r,g,b, 1.0f);
	/*float y = u_texY.Sample(def_sampler, input.tex).r;
    return float4(1.0, 0.0, 0.0, 1.0f);
    return float4(y, y, y, 1.0f);*/
}
technique Draw
{
	pass
	{
		vertex_shader = VSDefault(input);
		pixel_shader  = PSDraw(input);
	}
}

