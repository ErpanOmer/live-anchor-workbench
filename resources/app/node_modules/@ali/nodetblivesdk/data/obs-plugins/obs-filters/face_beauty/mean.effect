uniform float4x4 ViewProj;
uniform texture2d image;

uniform texture2d target;
uniform float texelWidthOffset;
uniform float texelHeightOffset;

sampler_state def_sampler {
	Filter   = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertInOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct VertOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertOut VSDefault(VertInOut vert_in)
{
	VertOut vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = vert_in.uv;
	return vert_out;
}

float4 PSDrawBare(VertOut vert_in) : TARGET
{
	float4 E  = image.Sample(def_sampler, vert_in.uv);
	for(int i=1;i<=12;i++){
		E  += image.Sample(def_sampler, vert_in.uv.xy +  i * float2(texelWidthOffset, texelHeightOffset));
		E  += image.Sample(def_sampler, vert_in.uv.xy -  i * float2(texelWidthOffset, texelHeightOffset));
	}
	return E/(25);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawBare(vert_in);
	}
}
